# Input data to run the meson correlation function
--> Sergio Chaves Garcia-Mascaraque
--> Abril de 2018 - Mayo de 2019

#    In order to run the code, you should:
#
#    $ mpiexec -n numCores python free_m4py.py nameInputFile

# Name of the output file -- Inside results
output_name Andrea_Test_2

""" Lattice parameters """

# Spatial length of the lattice
spatial_length 4

# Temporal extent of the lattice - Maximum time in case of Tinf
temporal_extent 12

# Calculate only a bunch of times of the correlation function.
# It calculates from time_init to time_finit - 1
# If set to time_init = time_finit = 0 -- All times are calculated
time_init time_finit 0 0

# Boundary conditions in the time direction
# 0 for AntiPeriodic, 1 for Tinfinite, 2 for Dirichlet/Open/SF
boundary_elec 2

""" Parameters of the simulation """
# Meson type calculations, it allows "2FLAVORS" for charged mesons
# and "BLOB" to calculate disconnected diagrams
meson_type 2FLAVORS

# Do you want to use O(a) mass-improvement scheme ? 0 for No, 1 for Yes
improv 0

# Flavor structure of the twisted mass terms. If set to 1, -1, they are up and down
flavor_tm_1 flavor_tm_2 1 -1

# Standard masses of the quarks - In units of m * L
mass_1 mass_2 0 0

# Module of the twisted mass of the quarks - In units of \mu * L
twisted_mass_1 twisted_mass_2 0.04 0.04

# Time position of the source - Irrelevant when calculating blobs
t_source 0

# Wilson r-Parameters for both quarks
r_1 r_2 1 1

# Operator that define the mesons -  G0 == G4.
# First one is the sink, second one is the source
# Available { I G1 G2 G3 G4 G5 G4G1 G4G2 G4G3 G4G5 G1G2 G1G3 G1G5 G2G3 G2G5 G3G5 }
operator_1 operator_2 G5 G5

# Final momenta for the meson - Set it to [0,0,0]. Add momenta with theta BC.
final_momenta 0 0 0

# Theta BC to add momenta to the quarks
theta_1 0 0 0
theta_2 0 0 0

""" Divisions of the lattice -- Parallelization and memory """

# The divisions of the lattice must hold N_i * N_mini_i %  L_i = 0.
# They must be multiples of the length in that direction

# Divisions at each direction. They must hold N_i <= L_i and prod( N_i) = N_cores
# We divide the lattice into blocks, each block is calculated in each processor
N_X 1
N_Y 1
N_Z 2

# Only used in antiperiodic - Set it to one in the other cases
N_T1 1
N_T2 1

# Subdivisions at each division. We divide the blocks into more blocks at EACH
# processor to avoid memory problems. Note that in real life we do not have
# infinitely many resources.

# The values must hold, N_i * N_mini_i <= L_i.
N_mini_X 1
N_mini_Y 1
N_mini_Z 1

# Only used in antiperiodic - Set it to one in the other cases
N_mini_T1 1
N_mini_T2 1
